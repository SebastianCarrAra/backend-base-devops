pipeline {
    agent any
    environment {
        USERNAME = 'admin'
        API_KEY = "Miau12345"
    }
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Build and test') {
            agent {
                docker {
                    image 'node:20.11.1-alpine3.19' 
                    reuseNode true
                }
            }
            stages {
               stage('Instalar dependencias') {
                   steps {
                       sh 'npm install'
                   }
               } 
                stage('ejecucion de test') {
                   steps {
                       sh 'npm run test'
                   }
               } 
                stage('ejecucion de build') {
                   steps {
                       sh 'npm run build'
                   }
                   
               } 
            }
        }
    stage('Code Quality'){
            stages {
                stage('SonarQube Analisis') {
                    agent {
                        docker {
                            image 'sonarsource/sonar-scanner-cli' 
                            args '--network="backend-base-devops_default"'
                            reuseNode true
                        }
                    }
                    steps {
                        withSonarQubeEnv('sonarqube') {
                            sh 'sonar-scanner'
                        }
                    }
                }
             
            }
        }

            stage('puerta de calidad'){
                steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "Quality Gate failed: ${qualityGate.status}"
                        }
                    }
                }
            }
        }

        stage('Login to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh """
                        docker login localhost:8082 -u $NEXUS_USERNAME -p $NEXUS_PASSWORD
                    """
                }
            }
        }
    
        stage('deploy-Ejecucion de docker'){
            steps {
                    sh 'ls -la'
                    sh 'docker build -t backend-base-devops:latest .'
                    
                 }
            }
        
        
        stage('deploy-Ejecucion de Nexus'){
            steps {
                    
                    sh "docker tag backend-base-devops:latest localhost:8082/backend-base-devops:latest"
                    sh 'docker push localhost:8082/backend-base-devops:latest'
                 }
            }

         
      

        stage('Deploy'){
            steps {
                  script {
                      docker.withRegistry('http://localhost:8082', 'nexus-credentials-id') {
                       sh "docker compose pull"
                       sh "docker compose up  --build -d"
                    }
               }
            }
        }
    }
}